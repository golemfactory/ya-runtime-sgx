name: Release

on:
  push:
    tags:
      - v*
      - pre-rel-*

env:
  MAKE_ARGS: ''

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        uses: actions/github-script@v3.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let tag = context.payload.ref.replace(/.*\//, '');
            let buildNo = context.runNumber;
            let versionName = tag.replace(/^pre-rel-/,'');
            try {
              let release =  await github.request("GET /repos/:owner/:repo/releases/tags/:tag", {
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag
              });
            }
            catch(e) {
              let body = ["By installing & running this software you declare that you have read",
                "understood and hereby accept the disclaimer and",
                "privacy warning found at https://handbook.golem.network/see-also/terms"].join("\n");
              let release =  await github.request("POST /repos/:owner/:repo/releases", {
                owner: context.repo.owner,
                repo: context.repo.repo,
                data: {
                  tag_name: tag,
                  prerelease: true,
                  body: body,
                  name: `${versionName} #${buildNo}`
                }
              });
              console.log(release.data.upload_url);
            }

  build:
    name: Build release
    needs: create-release
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        os:
          - ubuntu

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Musl
        if: matrix.os == 'ubuntu'
        run: |
          sudo apt-get install musl musl-tools
          musl-gcc -v

      - uses: actions-rs/toolchain@v1
        if: matrix.os != 'ubuntu'
        with:
          toolchain: stable

      - uses: actions-rs/toolchain@v1
        if: matrix.os == 'ubuntu'
        with:
          toolchain: stable
          target: x86_64-unknown-linux-musl
          override: true

      - name: Fetch nsjail revision hash
        id: nsjail-rev
        run: |
          echo "::set-output name=rev::$(git ls-remote -q https://github.com/golemfactory/nsjail | head -n1 | grep -o '^[^[:space:]]\+')"

      - name: Cache graphene
        id: cache-graphene
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/distro/graphene
          key: ${{ runner.os }}-graphene-${{ hashFiles('distro/Makefile', 'distro/graphene.Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-graphene-

      - name: Cache nsjail
        id: cache-nsjail
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/distro/nsjail
          key: ${{ runner.os }}-nsjail-${{ steps.nsjail-rev.outputs.rev }}-${{ hashFiles('distro/Makefile', 'distro/graphene.Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-nsjail-

      - name: Cache sgx-exe-unit
        id: cache-sgx-exe-unit
        uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/distro/yagna/sgx-exe-unit
            ${{ github.workspace }}/distro/yagna/libgcc_s.so.1
            ${{ github.workspace }}/distro/yagna/liblzma.so.5
          key: ${{ runner.os }}-sgx-exe-unit-${{ hashFiles('distro/Makefile', 'distro/exe-unit.Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-sgx-exe-unit-

      - name: Cache ya-runtime-sgx-wasi
        id: cache-ya-runtime-sgx-wasi
        uses: actions/cache@v2
        with:
          path: ${{ github.workspace }}/distro/yagna/ya-runtime-sgx-wasi
          key: ${{ runner.os }}-sgx-wasi-${{ hashFiles('distro/Makefile', 'distro/ya-runtime-wasi.Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-sgx-wasi-

      - name: On cache restoration - graphene
        if: steps.cache-graphene.outputs.cache-hit == 'true'
        run: |
          echo "MAKE_ARGS=$MAKE_ARGS -o graphene/.ready" >> $GITHUB_ENV

      - name: On cache restoration - nsjail
        if: steps.cache-nsjail.outputs.cache-hit == 'true'
        run: |
          echo "MAKE_ARGS=$MAKE_ARGS -o nsjail" >> $GITHUB_ENV

      - name: On cache restoration - sgx-exe-unit
        if: steps.cache-sgx-exe-unit.outputs.cache-hit == 'true'
        run: |
          echo "MAKE_ARGS=$MAKE_ARGS -o yagna/sgx-exe-unit -o yagna/libgcc_s.so.1 -o yagna/liblzma.so.5" >> $GITHUB_ENV

      - name: On cache restoration - ya-runtime-sgx-wasi
        if: steps.cache-ya-runtime-sgx-wasi.outputs.cache-hit == 'true'
        run: |
          echo "MAKE_ARGS=$MAKE_ARGS -o yagna/ya-runtime-sgx-wasi" >> $GITHUB_ENV

      - name: Build ya-runtime-sgx
        run: |
          cargo build --release --target x86_64-unknown-linux-musl

      - name: Build Release
        working-directory: distro
        run: |
          make $MAKE_ARGS build

      - name: Get upload url
        id: release_upload_url
        uses: actions/github-script@0.9.0
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            let tag = context.payload.ref.replace(/.*\//, '');
            let release =  await github.request("GET /repos/:owner/:repo/releases/tags/:tag", {
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: tag
            });
            console.log(release.data.upload_url);
            return release.data.upload_url

      - name: Extract Version
        id: version
        shell: bash
        env:
          OS_NAME: ${{ matrix.os }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          TAGV_NAME="${TAG_NAME#pre-rel-}"
          VERSION=${TAGV_NAME#v}
          echo "::set-output name=tagv::${TAG_NAME}"
          echo "::set-output name=version::${VERSION}"

      - name: Upload Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.release_upload_url.outputs.result }}
          asset_path: distro/ya-runtime-sgx-artifacts.tar.gz
          asset_name: ya-runtime-sgx_${{ steps.version.outputs.tagv }}.tar.gz
          asset_content_type: application/vnd.debian.binary-package
